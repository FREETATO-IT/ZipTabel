@inject IJSRuntime JsRuntime

@using ZipTabel.Model

@* <div id="m" style="border: 1px solid black; padding: 5px; width: 100px; height: 30px;" contenteditable="true">
    @if (IsFormula)
    {
        <span style="color: blue;">@Cell.Formula</span>
    }
    else
    {
        @foreach (var (charValue, index) in Cell.Value?.Select((c, i) => (c, i)) ?? Enumerable.Empty<(char, int)>())
        {
            <span style="color: @(Cell.GetCharColor(index)); font-size: @(Cell.GetCharSize(index))px;">
                @charValue       
            </span>
        }
    }
</div> *@

<input @oninput="HandleInputChange" style="@Style" @ondblclick="OnCellDoubleClick" class="input-cell" id="userInput" />

<script>
    var search = document.getElementById('userInput');

    search.oninput = function() {
        if (this.value.length == 2 && !isNaN(+this.value)) {
            document.getElementById("m").focus();
        }
        console.log(1);
    };
</script>


@* <script>

    var temp;

    function showAlert()
    {
        var e = document.getElementById('userInput');
        e.target.value = e.target.value.split('1').join('I');
    }


</script> *@

@code {
    [Parameter] public Cell Cell { get; set; }
    [Parameter]
    public string Style { get; set; }
    private string UserInput ;
    private bool IsEditing = false;  
    private bool IsFormula => !string.IsNullOrEmpty(UserInput) && UserInput.StartsWith("=");

    protected override async Task OnInitializedAsync()
    {
        UserInput = Cell.Value;
    }

    private async void OnCellDoubleClick()
    {
        IsEditing = true;

        if (String.IsNullOrEmpty(Cell.Value))
        {
            Cell.Formula = "=";
        }

        if (!string.IsNullOrEmpty(Cell.Formula) && Cell.Formula[0] != '=')
        {
            Cell.Formula = "=" + Cell.Formula; 
        }

        UserInput = Cell.Formula;
    }


    private /* async */ void HandleInputChange(ChangeEventArgs e)
    {
        UserInput = e.Value.ToString();
        if (IsFormula)
        {
            Cell.Formula = UserInput;
            Cell.Recalculate();
        }
        else
        {
            Cell.Value = UserInput;
        }

        IsEditing = false;

        /* wait JS.InvokeAsync<string>("showAlert"); */
    }

    private string EditingClass => IsEditing ? "editing" : string.Empty;
}
