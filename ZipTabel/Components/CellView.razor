@using System.Timers
@using System.Text.RegularExpressions
@using System.Text.Json
@using ZipTabel.Pages
@inject IJSRuntime JSRuntime
<input @onkeyup="HandleKeyDown"
@onblur="OnInputBlur"
@onfocus="OnInputFocus"
@bind-value="@UserInput"
class="input-cell @EditingClass"
id="@Cell.Address" />
@code {
    [Parameter] public Cell Cell { get; set; }
    private string userInput = string.Empty;
    public string UserInput
    {
        get { return userInput; }
        set
        {
            userInput = value;
        }
    }
    private string Buffer { get; set; } = string.Empty;
    private bool IsEditing { get; set; } = false;
    protected override void OnInitialized()
    {
        Cell.Value = UserInput;
    }
    private async void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await JSRuntime.InvokeVoidAsync("inputChanged");

            // Log when the cell stops being a formula
            bool wasFormula = Cell.IsFormula;

            if (string.IsNullOrWhiteSpace(UserInput))
            {
                if (wasFormula)
                {
                    Console.WriteLine($"Cell {Cell.Address} is no longer a formula. Previous formula: {Cell.Formula}");
                }
                Cell.IsFormula = false;
                Cell.Formula = string.Empty;
                Cell.Value = string.Empty;
                UserInput = string.Empty;
            }
            else if (UserInput.StartsWith("="))
            {
                Cell.IsFormula = true;
                Cell.Formula = UserInput;
                OnCalculate();
            }
            else
            {
                if (wasFormula)
                {
                    Console.WriteLine($"Cell {Cell.Address} is no longer a formula. Previous formula: {Cell.Formula}");
                }
                Cell.IsFormula = false;
                Cell.Formula = string.Empty;
                Cell.Value = UserInput;
            }

            Buffer = UserInput;
            IsEditing = false;
            StateHasChanged();
        }
        else if (e.Key == "Escape")
        {
            UserInput = Buffer;
            IsEditing = false;
            StateHasChanged();
        }
    }
    public void OnCalculate()
    {

        try
        {
            Cell.Value = "";
            Cell.Dependents = new List<ICell>();
            var res =RangeParser.ParseAddressFormula(UserInput).ToList();
            foreach (var item in res)
            {
                var _cell = Home.Sheet.GetCell(item);
                Console.WriteLine(JsonSerializer.Serialize(_cell));
                Cell.Dependents.Add(_cell);
            }

            UserInput = ExcelFormulaEvaluator.ParseFormula(UserInput, Cell.Dependents);
            Cell.Value = UserInput;
        }
        catch (Exception ex)
        {
            Cell.Value = ex.Message;
            Console.WriteLine(ex.Message);
        }
        StateHasChanged();
    }
    private void OnInputBlur()
    {
        bool wasFormula = Cell.IsFormula;

        if (string.IsNullOrWhiteSpace(UserInput))
        {
            if (wasFormula)
            {
                Console.WriteLine($"Cell {Cell.Address} is no longer a formula. Previous formula: {Cell.Formula}");
            }
            Cell.IsFormula = false;
            Cell.Formula = string.Empty;
            Cell.Value = string.Empty;
        }
        else if (!Cell.IsFormula)
        {
            Cell.Value = UserInput;
        }
        else
        {
            UserInput = Cell.Value;
        }
        StateHasChanged();
    }
    private void OnInputFocus(FocusEventArgs e)
    {
        if (Cell.IsFormula)
        {
            UserInput = Cell.Formula;
        }
        else
        {
            UserInput = Cell.Value;
        }
        Buffer = UserInput;
        IsEditing = true;
        StateHasChanged();
    }
    private bool IsFormula => Cell.Formula.StartsWith("=");
    private string EditingClass => IsEditing ? "editing" : string.Empty;
}