@inject IJSRuntime JsRuntime
@using ZipTabel.Model

<div style="border: 1px solid black; padding: 5px; width: 100px; height: 30px;">
    @if (IsFormula)
    {
        <span style="color: blue;">@Cell.Formula</span>
    }
    else
    {
        @foreach (var (charValue, index) in Cell.Value?.Select((c, i) => (c, i)) ?? Enumerable.Empty<(char, int)>())
        {
            <span style="color: @(Cell.GetCharColor(index)); font-size: @(Cell.GetCharSize(index))px;">
                @charValue       
            </span>
        }
    }
</div>
<span> @temp </span>
<input @oninput="HandleInputChange" @ondblclick="OnCellDoubleClick" class="input-cell" placeholder="Enter value" id="userInput" />

<script>
    document.getElementById('userInput').addEventListener('input', function(e){
      e.target.value = e.target.value.split('2').join("");   
    });
</script>

@code {
    [Parameter] public Cell Cell { get; set; }

    public int temp = 1;

    private string UserInput ;
    private bool IsEditing = false;  
    private bool IsFormula => !string.IsNullOrEmpty(UserInput) && UserInput.StartsWith("=");

    protected override async Task OnInitializedAsync()
    {
        UserInput = Cell.Value;
    }
 
    private async void OnCellDoubleClick()
    {
        IsEditing = true;

        if (String.IsNullOrEmpty(Cell.Value))
        {
            Cell.Formula = "=";
        }

        if (!string.IsNullOrEmpty(Cell.Formula) && Cell.Formula[0] != '=')
        {
            Cell.Formula = "=" + Cell.Formula; 
        }

        UserInput = Cell.Formula;
    }


    private void HandleInputChange(ChangeEventArgs e)
    {
        UserInput = e.Value.ToString();
        if (IsFormula)
        {
            Cell.Formula = UserInput;
            Cell.Recalculate();
        }
        else
        {
            Cell.Value = UserInput;
        }

        IsEditing = false;  
    }

    private string EditingClass => IsEditing ? "editing" : string.Empty;
}
