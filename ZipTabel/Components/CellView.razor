@using System.Timers
@using System.Text.RegularExpressions
@using System.Text.Json
@using ZipTabel.Pages
@inject IJSRuntime JSRuntime
<input @onkeyup="HandleKeyDown"
       @onblur="OnInputBlur"
       @onfocus="OnInputFocus"
       @bind-value="@UserInput"
       class="input-cell @EditingClass"
       id="@Cell.Address" />
@code {
    [Parameter] public Cell Cell { get; set; }
    private string userInput = string.Empty;
    public string UserInput
    {
        get { return userInput; }
        set
        {
            userInput = value;
        }
    }
    private string Buffer { get; set; } = string.Empty;
    private bool IsEditing { get; set; } = false;

    protected override void OnInitialized()
    {
        Cell.Value = UserInput;
    }

    private async void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await JSRuntime.InvokeVoidAsync("inputChanged");

            if (string.IsNullOrWhiteSpace(UserInput))
            {
                Cell.IsFormula = false;
                Cell.Formula = string.Empty;
                Cell.Value = string.Empty;
                UserInput = string.Empty;
            }
            else if (UserInput.StartsWith("="))
            {
                Cell.IsFormula = true;
                Cell.Formula = UserInput;
                Console.WriteLine("Запуск OnCalculate");
                OnCalculate();
            }
            else
            {
                Cell.IsFormula = false;
                Cell.Formula = string.Empty;
                Cell.Value = UserInput;
            }

            Buffer = UserInput;
            IsEditing = false;
            Style = string.Empty;
            StateHasChanged();
        }
        else if (e.Key == "Escape")
        {
            UserInput = Buffer;
            IsEditing = false;
            Style = string.Empty;
            StateHasChanged();
        }
    }

    private void OnCalculate()
    {
        try
        {
            Cell.Dependents.Clear();

            string pattern = @"([A-Z]+[0-9]+)";
            MatchCollection matches = Regex.Matches(UserInput, pattern);
            foreach (Match match in matches)
            {
                Cell.Dependents.Add(Home.Sheet.GetCell(match.Value));
            }

            Cell.Value = ExcelFormulaEvaluator.ParseFormula(UserInput, Cell.Dependents);
            UserInput = Cell.Value;
        }
        catch (Exception ex)
        {
            Cell.Value = ex.Message;
        }
        StateHasChanged();
    }

    private void OnInputBlur()
    {
        if (string.IsNullOrWhiteSpace(UserInput))
        {
            Cell.IsFormula = false;
            Cell.Formula = string.Empty;
            Cell.Value = string.Empty;
        }
        else if (!Cell.IsFormula)
        {
            Cell.Value = UserInput;
        }
        else
        {
            UserInput = Cell.Value;
        }

        StateHasChanged();
    }

    private void OnInputFocus(FocusEventArgs e)
    {
        if (Cell.IsFormula)
        {
            UserInput = Cell.Formula;
        }
        else
        {
            UserInput = Cell.Value;
        }

        Buffer = UserInput;
        IsEditing = true;
        Style = "color: blue;";
        StateHasChanged();
    }

    private bool IsFormula => Cell.Formula.StartsWith("=");
    private string EditingClass => IsEditing ? "editing" : string.Empty;
}