@using System.Timers
@using System.Text.RegularExpressions
@using ZipTabel.Pages
@inject IJSRuntime JSRuntime
<input @oninput="HandleInputChange"
@ondblclick="OnCellDoubleClick"
@onkeyup="HandleKeyDown"
@onblur="OnInputBlur"
@bind-value="@UserInput"
style="@Style"
class="input-cell @EditingClass"
id="@Cell.Address" />

@code {
    [Parameter] public Cell Cell { get; set; }
    [Parameter] public string Style { get; set; }
    private string UserInput { get; set; } = string.Empty;

    private string Buffer { get; set; } = string.Empty;

    private bool IsEditing = false;

    protected override void OnInitialized()
    {
        UserInput = Cell.Value;
    }

    private async Task HandleInputChange(ChangeEventArgs e)
    {

    }

    private async void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            JSRuntime.InvokeVoidAsync("console.log", "________________");
            string pattern = @"([A-Z]+[0-9]+)";
            MatchCollection matches = Regex.Matches(UserInput, pattern);
            foreach (Match match in matches)
            {
                JSRuntime.InvokeVoidAsync("console.log", "@ " + match.Value);
                Cell.Dependents.Add(Home.Sheet.GetCell(match.Value));
                JSRuntime.InvokeVoidAsync("console.log", "@ " + (Home.Sheet.GetCell(match.Value).Value));
            }
            Cell.Value = ExcelFormulaEvaluator.ParseFormula(UserInput, Cell.Dependents);

            await JSRuntime.InvokeVoidAsync("inputChanged");
            UserInput = Cell.Value;

            StateHasChanged();
        }
        else if (e.Key == "Escape")
        {
            StateHasChanged();
        }
    }

    private void OnCellDoubleClick()
    {
        if (string.IsNullOrEmpty(Cell.Formula)){
            Cell.Formula = "=";
        }

        Style = "color: blue;";
        IsEditing = true;
        Buffer = UserInput;
        UserInput = Cell.Formula;
        StateHasChanged();
    }

    private void OnInputBlur()
    {

    }
    private bool IsFormula => Cell.Formula.StartsWith("=");

    private string EditingClass => IsEditing ? "editing" : string.Empty;
}
