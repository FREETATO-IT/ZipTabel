@using System.Text.Json
@using System.ComponentModel
@inject IJSRuntime JSRuntime

<input @onkeyup="HandleKeyDown"
       @onblur="OnInputBlur"
       @onfocus="OnInputFocus"
       @bind-value="@UserInput"
       class="input-cell @EditingClass"
       id="@Cell.Address" />

@code {
    [Parameter] public Cell Cell { get; set; }
    private string userInput = string.Empty;
    private string Buffer { get; set; } = string.Empty;
    private bool IsEditing { get; set; } = false;

    public string UserInput
    {
        get => userInput;
        set
        {
            userInput = value;
        }
    }

    protected override void OnInitialized()
    {
        // Подписка на событие PropertyChanged
        Cell.PropertyChanged += CellPropertyChanged;
        UserInput = Cell.Value; // Устанавливаем начальное значение
    }

    private void CellPropertyChanged(object sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(Cell.Value))
        {
            UserInput = Cell.Value;
            StateHasChanged();
        }
    }

    private async void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await JSRuntime.InvokeVoidAsync("inputChanged");
            bool wasFormula = Cell.IsFormula;

            if (string.IsNullOrWhiteSpace(UserInput))
            {
                if (wasFormula)
                {
                    Console.WriteLine($"Cell {Cell.Address} is no longer a formula. Previous formula: {Cell.Formula}");
                }
                Cell.IsFormula = false;
                Cell.Formula = string.Empty;
                Cell.Value = string.Empty;
                UserInput = string.Empty;
            }
            else if (UserInput.StartsWith("="))
            {
                Cell.IsFormula = true;
                Cell.Formula = UserInput; // Устанавливаем новую формулу
            }
            else
            {
                if (wasFormula)
                {
                    Console.WriteLine($"Cell {Cell.Address} is no longer a formula. Previous formula: {Cell.Formula}");
                }
                Cell.IsFormula = false;
                Cell.Formula = string.Empty;
                Cell.Value = UserInput; // Устанавливаем новое значение
            }

            Buffer = UserInput;
            IsEditing = false;
            StateHasChanged();
        }
        else if (e.Key == "Escape")
        {
            UserInput = Buffer;
            IsEditing = false;
            StateHasChanged();
        }
    }

    private void OnInputBlur()
    {
        if (!Cell.IsFormula)
        {
            Cell.Value = UserInput; // Обновляем значение ячейки
        }
        else
        {
            UserInput = Cell.Value; // Возвращаемся к формуле
        }
        IsEditing = false;
        StateHasChanged();
    }

    private void OnInputFocus(FocusEventArgs e)
    {
        UserInput = Cell.IsFormula ? Cell.Formula : Cell.Value;
        Buffer = UserInput;
        IsEditing = true;
        StateHasChanged();
    }

    private string EditingClass => IsEditing ? "editing" : string.Empty;
}
