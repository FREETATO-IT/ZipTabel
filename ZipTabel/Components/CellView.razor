@inject IJSRuntime JsRuntime
@using ZipTabel.Model
@using ZipTabel.Pages
<input @oninput="HandleInputChange"
       @ondblclick="OnCellDoubleClick"
       @onkeydown="HandleKeyDown"
       style="@Style"
       class="input-cell @EditingClass"
       id="@Cell.Address"
       value="@UserInput" />
@code {
    [Parameter] public Cell Cell { get; set; }
    [Parameter] public string Style { get; set; }

    private string UserInput { get; set; }
    private bool IsEditing = false;
    private bool IsFormula => !string.IsNullOrEmpty(UserInput) && UserInput.StartsWith("=");

    protected override void OnInitialized()
    {
        UserInput = Cell.Value;
    }
   
    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.CtrlKey)
        {
            UserInput = Cell.Address;
            Cell.Value = Cell.Address;
            Style = "color: green;";
            StateHasChanged();
        }
    }

    private void OnCellDoubleClick()
    {
        Style = "color: blue;";
        IsEditing = true;
        StateHasChanged();

        if (string.IsNullOrEmpty(Cell.Value))
        {
            Cell.Formula = "=";
        }

        if (!string.IsNullOrEmpty(Cell.Formula) && Cell.Formula[0] != '=')
        {
            Cell.Formula = "=" + Cell.Formula;
        }

        UserInput = Cell.Formula ?? Cell.Value;
    }

    private void HandleInputChange(ChangeEventArgs e)
    {
        UserInput = e.Value?.ToString() ?? string.Empty;
        CellManager.SetValue(UserInput);
        if (IsFormula)
        {
            Cell.Formula = UserInput;
            Cell.Recalculate();
        }
        else
        {
            Cell.Value = UserInput;
        }
        Style = "color: black;";
        IsEditing = false;
        StateHasChanged();
    }
    private string EditingClass => IsEditing ? "editing" : string.Empty;
}
