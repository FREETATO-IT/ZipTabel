@page "/"
@using ZipTabel.Components
@inject IJSRuntime JSRuntime
<PageTitle>Home</PageTitle>

<table border="1">
    <thead>
        <tr>
            <th></th>
            @for (int col = 1; col <= TotalCols; col++)
            {
                <th>@GetColumnLetter(col)</th>
            }
        </tr>
    </thead>
    <tbody>
        @for (int row = 1; row <= TotalRows; row++)
        {
            <tr>
                <td>@row</td>
                @for (int col = 1; col <= TotalCols; col++)
                {
                    var address = GetCellAddress(row, col);
                    var cell = Sheet.GetCell(address);
                    <td>
                        <ZipTabel.Components.CellView Cell="@cell" />
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

<script>
    let blazorComponent; 
    //проверка y
    window.scrollToBottomHandler = () => {
    const scrollTop = window.scrollY || document.documentElement.scrollTop;
    const windowHeight = window.innerHeight;
    const documentHeight = document.documentElement.scrollHeight - 20;        

    if (scrollTop + windowHeight >= documentHeight) {
    blazorComponent.invokeMethodAsync('YourBlazorMethodForVerticalScroll');
    }
    };
    //проверка x
    window.scrollToRightHandler = () => {
    const scrollLeft = window.scrollX || document.documentElement.scrollLeft;
    const windowWidth = window.innerWidth;  
    const documentWidth = document.documentElement.scrollWidth - 20;  

    if (scrollLeft + windowWidth >= documentWidth) {
    blazorComponent.invokeMethodAsync('YourBlazorMethodForHorizontalScroll');
    }
    };
    //вызов
    window.initializeScrollListeners = (dotNetReference) => {
    blazorComponent = dotNetReference;
    window.addEventListener('scroll', scrollToBottomHandler);
    window.addEventListener('scroll', scrollToRightHandler);
    };

    window.removeScrollListeners = () => {
    window.removeEventListener('scroll', scrollToBottomHandler);
    window.removeEventListener('scroll', scrollToRightHandler);
    };
</script>

@code {
    public Sheet Sheet = new Sheet();
    private int TotalRows = 20;        
    private int TotalCols = 10;  

    [JSInvokable("YourBlazorMethodForVerticalScroll")]
    public void YourBlazorMethodForVerticalScroll()
    {
        TotalRows++;
        var address = GetCellAddress(TotalRows, 1);  
        Sheet.AddCell(address, new Cell(address));
             
        // Console.WriteLine("y");

        StateHasChanged();
    }

    [JSInvokable("YourBlazorMethodForHorizontalScroll")]
    public void YourBlazorMethodForHorizontalScroll()
    {
        TotalCols++;
        var address = GetCellAddress(1, TotalCols);   
        Sheet.AddCell(address, new Cell(address));

        // Console.WriteLine("x");

        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Передаем ссылку на экземпляр компонента
            await JSRuntime.InvokeVoidAsync("initializeScrollListeners", DotNetObjectReference.Create(this));
        }
    }

    public void Dispose()
    {
        JSRuntime.InvokeVoidAsync("removeScrollListeners");
    }


    private async Task InitializeSheet()
    {
        for (int row = 1; row <= TotalRows; row++)
        {
            for (int col = 1; col <= TotalCols; col++)
            {
                var address = GetCellAddress(row, col);
                Sheet.AddCell(address, new Cell(address));
            }
        }
    }

    // private async Task ExpandRight()
    // {
    //     int newTotalCols = TotalCols + 10;

    //     // Add new columns
    //     for (int row = 1; row <= TotalRows; row++)
    //     {
    //         for (int col = TotalCols + 1; col <= newTotalCols; col++)
    //         {
    //             var address = GetCellAddress(row, col);
    //             Sheet.AddCell(address, new Cell(address));
    //         }
    //     }

    //     TotalCols = newTotalCols;

    // }

    // private async Task ExpandDown()
    // {
    //     int newTotalRows = TotalRows + 10;

    //     for (int row = TotalRows + 1; row <= newTotalRows; row++)
    //     {
    //         for (int col = 1; col <= TotalCols; col++)
    //         {
    //             var address = GetCellAddress(row, col);
    //             Sheet.AddCell(address, new Cell(address));
    //         }
    //     }

    //     TotalRows = newTotalRows;      

    //     StateHasChanged();
    // }      

    private string GetCellAddress(int row, int col)
    {
        return $"{GetColumnLetter(col)}{row}";
    }

    private string GetColumnLetter(int col)
    {
        int dividend = col;
        string columnLetter = String.Empty;
        while (dividend > 0)
        {
            int modulo = (dividend - 1) % 26;
            columnLetter = Convert.ToChar(65 + modulo) + columnLetter;
            dividend = (dividend - modulo) / 26;
        }
        return columnLetter;
    }
}