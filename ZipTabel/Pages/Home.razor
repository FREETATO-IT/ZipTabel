@page "/"
@using ZipTabel.Components
@inject IJSRuntime JSRuntime
<PageTitle>Home</PageTitle>
<script src="js/script.js"></script>
<button @onclick="ExportFile">Экспортировать файл</button>

@code {
    private async Task ExportFile()
    {
        var fileContent = "Имя,Фамилия,Возраст\nИван,Иванов,30\nМария,Петрова,25";

        await JSRuntime.InvokeVoidAsync("downloadFile", "data.json", Sheet.OnSaveSheet());
    }
}
<MainMenu></MainMenu>

<table border="1">
    <thead>
        <tr>
            <th></th>
            @for (int col = 1; col <= TotalCols; col++)
            {
                <th>@GetColumnLetter(col)</th>
            }
        </tr>
    </thead>
    <tbody>
        @for (int row = 1; row <= TotalRows; row++)
        {
            <tr>
                <td>@row</td>
                @for (int col = 1; col <= TotalCols; col++)
                {
                    var address = GetCellAddress(row, col);
                    var cell = Sheet.GetCell(address);
                    <td>
                        <ZipTabel.Components.CellView Cell="@cell" />
                    </td>
                }
            </tr>
        }
    </tbody>

</table>
<script>
    function downloadFile(fileName, content) {
        const blob = new Blob([content], { type: 'text/csv' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = fileName;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
    }
</script>

@* <script>
    window.initScrollDrag = function() {
        let isMouseDown = false; // Чтобы отслеживать состояние мыши
        let startY; // Начальная позиция мыши

        let temp = 0;
        let walk;

        // Обработчик mousedown
        document.addEventListener('mousedown', function(event) {
            isMouseDown = true; // Активируем режим перетаскивания
            startY = event.pageY; // Сохраняем начальную позицию Y
            document.body.style.cursor = 'grabbing'; // Меняем курсор
        });

        // Обработчик mouseup
        document.addEventListener('mouseup', function() {
            isMouseDown = false; // Деактивируем режим перетаскивания
            temp = 0;
            document.body.style.cursor = 'grab'; // Возвращаем курсор обратно
        });

        // Обработчик mousemove
        document.addEventListener('mousemove', function(event) {
            if (!isMouseDown) return; // Если не перетаскиваем, выходим

            if(walk >= 0)
                temp++;
            else
                temp--;

            //console.log(temp);

            event.preventDefault(); // Предотвращаем выделение текста при прокрутке
            const y = event.pageY; // Текущая позиция мыши
            walk = (y - startY) * 4; // Параметр, контролирующий скорость прокрутки

            startY = y; // Обновляем начальную позицию для следующего движения

                        console.log(walk);
        });

        setInterval(intervalId, 0);

        function intervalId() {
            if(temp > 100)
                window.scrollBy(0, +walk); // Прокручиваем тело документа
            else if(temp < 0)
                window.scrollBy(0, +walk); // Прокручиваем тело документа

            console.log(walk);
        }
    };

</script> *@

<script>
    let previousInput = null;
    let inputFormula = null;

    function checkFirstCharacter(inputElement) {
    const value = inputElement.value; // Получаем текущее значение поля ввода
    const inputElements = document.querySelectorAll(".input-cell");

    if (value.charAt(0) === "=") {
    console.log(`Первый символ в элементе с id ${inputElement.id} равен '='`);

    previousInput = inputElement.id;

    inputFormula = inputElement.value;

    console.log(inputFormula);

    // Уведомляем Blazor, если первый символ равен "="
    //DotNet.invokeMethodAsync('ВашеИмя_Проекта', 'OnEqualsDetected', inputElement.id);
    inputElements.forEach(el => {
        if (el !== inputElement) {
            el.readOnly = true; // Отключаем все, кроме текущего
        }
        });
        } else {
            inputElements.forEach(el => {
            el.readOnly = false; // Отключаем все, кроме текущего
            });

        previousInput = null;
        console.log(`Первый символ в элементе с id ${inputElement.id} не равен '='`);
        }
    }

    // Инициализация обработчика события input на всех элементах
    function initInputChecks() {
    const inputElements = document.querySelectorAll(".input-cell"); // Замените на ваш класс
    inputElements.forEach(function(inputElement) {
    inputElement.addEventListener("input", function() {
    checkFirstCharacter(inputElement);
    });
    });
    }

    // Функция для наблюдения за изменениями в контейнере
    function observeInputChanges(container) {
    const observer = new MutationObserver(function(mutations) {
    mutations.forEach(function(mutation) {
    if (mutation.type === "childList") {
    // Если добавлены новые узлы (input элементы)
    initInputChecks(); // Переинициализируем обработчики для новых input
    }
    });
    });

    observer.observe(container, {
    childList: true, // Наблюдаем за добавлением/удалением дочерних элементов
    subtree: true // Наблюдаем за изменениями также и в дочерних узлах
    });
    }

    // Вызов функций инициализации
    document.addEventListener("DOMContentLoaded", function() {
    const inputContainer = document.querySelector("#input-container"); // Укажите ваш контейнер с input
    initInputChecks(); // Инициализируем обработчики для существующих input
    observeInputChanges(inputContainer); // Начинаем наблюдение за изменениями
    });

    window.initInputHandlers = function(dotnetHelper) {
    var tableBody = document.querySelector('tbody');
    var isMouseDown = false; // Переменная для отслеживания состояния мыши
    var startCell = null; // Ячейка, с которой начинается выделение
    var endCell = null; // Ячейка, с которой заканчивается выделение

    let tempValId = null;

    // Обработчик mouseup
    tableBody.addEventListener('mouseup', function(event) {
    if (event.target.tagName === 'INPUT') {
            const elementId = event.target.id;
            /* console.log(`ID до: ${elementId}`); */ // Выводим ID элемента в консоль

            // Возвращаем значение в Blazor
            dotnetHelper.invokeMethodAsync('ReceiveElementEndId', elementId);

            if(previousInput != null && previousInput != elementId)
            {
                if(tempValId != elementId)
                {
                    document.getElementById(previousInput).value += ":" + elementId;
                }
            }
        }

        console.log(previousInput);
        if(previousInput != null)
            document.getElementById(previousInput).focus();

        // Завершение выделения
        isMouseDown = false; // Сбрасываем состояние
    });

    // Обработчик mousedown
    tableBody.addEventListener('mousedown', function(event) {
        if (event.target.tagName === 'INPUT') {

            // if(document.getElementById(previousInput).value.charAt(0) != "=")
            //     console.log("ioio");

            const elementId = event.target.id;
            /* console.log(`ID от: ${elementId}`);  */// Выводим ID элемента в консоль

            // Возвращаем значение в Blazor
            dotnetHelper.invokeMethodAsync('ReceiveElementStartId', elementId);

            if(previousInput != null && previousInput != elementId)
            {
                document.getElementById(previousInput).value = inputFormula;
                document.getElementById(previousInput).value += elementId;
                tempValId = elementId;
            }

            isMouseDown = true; // Нажали кнопку мыши
            startCell = event.target.closest('td'); // Определяем начальную ячейку
            startCell.classList.add('selected'); // Выделяем начальную ячейку

            Array.from(tableBody.getElementsByTagName('td')).forEach(cell => {
                cell.classList.remove('selected');
            });

            startCell.classList.add('selected');

        }
    });

    // Выделение области при перемещении мыши
    tableBody.addEventListener('mousemove', function(event) {
    if (isMouseDown && event.target.tagName === 'INPUT') {
    endCell = event.target.closest('td'); // Определяем конечную ячейку
    highlightCells(startCell, endCell); // Функция для выделения ячеек
    }
    });

    // Функция выделения ячеек
    function highlightCells(startCell, endCell) {
    // Убираем выделение со всех ячеек
    Array.from(tableBody.getElementsByTagName('td')).forEach(cell => {
    cell.classList.remove('selected');
    });

    // Получаем индексы начальной и конечной ячеек
    const startRowIdx = startCell.parentElement.rowIndex - 1;
    const startColIdx = startCell.cellIndex;
    const endRowIdx = endCell.parentElement.rowIndex - 1;
    const endColIdx = endCell.cellIndex;

    const rowStart = Math.min(startRowIdx, endRowIdx);
    const rowEnd = Math.max(startRowIdx, endRowIdx);
    const colStart = Math.min(startColIdx, endColIdx);
    const colEnd = Math.max(startColIdx, endColIdx);

    // Выделяем ячейки в области
    for (let row = rowStart; row <= rowEnd; row++) {
    for (let col = colStart; col <= colEnd; col++) {
    const cell = tableBody.rows[row].cells[col];
    if (cell) {
    cell.classList.add('selected'); // Добавляем класс выделения
    }
    }
    }
    }
    }
</script>


<script>
    let blazorComponent;
    //проверка y
    window.scrollToBottomHandler = () => {
    const scrollTop = window.scrollY || document.documentElement.scrollTop;
    const windowHeight = window.innerHeight;
    const documentHeight = document.documentElement.scrollHeight - 20;

    if (scrollTop + windowHeight >= documentHeight) {
    blazorComponent.invokeMethodAsync('YourBlazorMethodForVerticalScroll');
    }
    };
    //проверка x
    window.scrollToRightHandler = () => {
    const scrollLeft = window.scrollX || document.documentElement.scrollLeft;
    const windowWidth = window.innerWidth;
    const documentWidth = document.documentElement.scrollWidth - 20;

    if (scrollLeft + windowWidth >= documentWidth) {
    blazorComponent.invokeMethodAsync('YourBlazorMethodForHorizontalScroll');
    }
    };
    //вызов
    window.initializeScrollListeners = (dotNetReference) => {
    blazorComponent = dotNetReference;
    window.addEventListener('scroll', scrollToBottomHandler);
    window.addEventListener('scroll', scrollToRightHandler);
    };

    window.removeScrollListeners = () => {
    window.removeEventListener('scroll', scrollToBottomHandler);
    window.removeEventListener('scroll', scrollToRightHandler);
    };
</script>


@code {

    private bool IsSelecting = false; // Флаг выбора
    public  static Sheet Sheet = new Sheet("Лист1");
    private int TotalRows = 30;
    private int TotalCols = 30;
    private string start = "";
    private string end = "";

    public string Start
    {
        get { return start; }
        set
        {
            start = value;

        }
    }

    public string End
    {
        get { return end; }
        set
        {
            end = value;

        }
    }


    [JSInvokable("YourBlazorMethodForVerticalScroll")]
    public void YourBlazorMethodForVerticalScroll()
    {
        TotalRows++;
        var address = GetCellAddress(TotalRows, 1);
        Sheet.AddCell(address, new Cell(address));

        // Console.WriteLine("y");

        StateHasChanged();
    }

    [JSInvokable("YourBlazorMethodForHorizontalScroll")]
    public void YourBlazorMethodForHorizontalScroll()
    {
        TotalCols++;
        var address = GetCellAddress(1, TotalCols);
        Sheet.AddCell(address, new Cell(address));

        // Console.WriteLine("x");

        StateHasChanged();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var dotnetHelper = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("initInputHandlers", dotnetHelper);

            await JSRuntime.InvokeVoidAsync("initializeScrollListeners", DotNetObjectReference.Create(this));

            await JSRuntime.InvokeVoidAsync("initInputChecks"); // Инициализируем проверку

            // await JSRuntime.InvokeVoidAsync("initScrollDrag");
        }
    }


    [JSInvokable("ReceiveElementStartId")]
    public void ReceiveElementStartId(string elementId)
    {
        Start = elementId;
    }

    [JSInvokable("ReceiveElementEndId")]
    public void ReceiveElementEndId(string elementId)
    {
        End = elementId;

        if(End!=Start)
            Console.WriteLine($"{Start}:{End}");
        else
            Console.WriteLine($"{Start}");
    }

    public void Dispose()
    {
        JSRuntime.InvokeVoidAsync("removeScrollListeners");
    }



    private string GetCellAddress(int row, int col)
    {
        return $"{GetColumnLetter(col)}{row}";
    }

    private string GetColumnLetter(int col)
    {
        int dividend = col;
        string columnLetter = string.Empty;
        while (dividend > 0)
        {
            int modulo = (dividend - 1) % 26;
            columnLetter = Convert.ToChar(65 + modulo) + columnLetter;
            dividend = (dividend - modulo) / 26;
        }
        return columnLetter;
    }


    private List<ICell> UpdateSelectedCells(Cell startCell, Cell endCell)
    {
        List<ICell> SelectedCells = new();
        if (startCell.Address == endCell.Address)
        {
            return new();
        }

        var (startRow, startCol) = ParseCellAddress(startCell.Address);
        var (endRow, endCol) = ParseCellAddress(endCell.Address);

        int minRow = Math.Min(startRow, endRow);
        int maxRow = Math.Max(startRow, endRow);
        int minCol = Math.Min(startCol, endCol);
        int maxCol = Math.Max(startCol, endCol);

        for (int row = minRow; row <= maxRow; row++)
        {
            for (int col = minCol; col <= maxCol; col++)
            {
                var address = GetCellAddress(row, col);
                var cell = Sheet.GetCell(address);
                SelectedCells.Add(cell);
            }
        }
        return SelectedCells;
    }
    private (int row, int col) ParseCellAddress(string address)
    {
        int col = 0;
        int row = 0;

        foreach (char c in address)
        {
            if (char.IsLetter(c))
            {
                col = col * 26 + (char.ToUpper(c) - 'A' + 1);
            }
            else if (char.IsDigit(c))
            {
                row = row * 10 + (c - '0');
            }
        }

        return (row, col);
    }
    private async Task OnPoastRangeNumbers(){

        if(Start[0]==End[0]){

            var rangeEllements = UpdateSelectedCells(Sheet.GetCell(Start), Sheet.GetCell(End));

            foreach (var item in rangeEllements)
            {
                
            }

        }
    }
    private bool IsAscending(IEnumerable<Cell> rangeElements)
    {
        var values = rangeElements.Select(cell => Convert.ToInt32(cell.Value)).ToList();

        for (int i = 1; i < values.Count; i++)
        {
            if (values[i] <= values[i - 1])
            {
                return false;
            }
        }

        return true;
    }
}

<style>
    table {
        border-collapse: collapse;
        width: 100%;
        margin-bottom: 20px;
    }

    th, td {
        border: 1px solid #cccccc;
        padding: 8px;
        text-align: left;
    }

    .highlighted {
        background-color: lightblue;
    }
</style>