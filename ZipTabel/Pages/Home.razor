@page "/"
@using ZipTabel.Components
@inject IJSRuntime JS
<PageTitle>Home</PageTitle>
<script src="js/script.js"></script>

<button @onclick="ExpandRight">10 вправо</button>
<button @onclick="ExpandDown">Expand 10 вниз</button>
<table border="1">
    <thead>
        <tr>
            <th></th>
            @for (int col = 1; col <= TotalCols; col++)
            {
                <th>@GetColumnLetter(col)</th>
            }
        </tr>
    </thead>
    <tbody>
        @for (int row = 1; row <= TotalRows; row++)
        {
            <tr>
                <td>@row</td>
                @for (int col = 1; col <= TotalCols; col++)
                {
                    var address = GetCellAddress(row, col);
                    var cell = Sheet.GetCell(address);
                    <td @onclick="() => OnCellClick(cell)">
                        <ZipTabel.Components.CellView  Cell="@cell" />
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

@code {
    public Sheet Sheet = new Sheet();
    private int TotalRows = 50;
    private int TotalCols = 50;
    protected override async Task OnInitializedAsync()
    {
        await InitializeSheetAsync();
    }

    private async Task InitializeSheetAsync()
    {
        for (int row = 1; row <= TotalRows; row++)
        {
            for (int col = 1; col <= TotalCols; col++)
            {
                var address = GetCellAddress(row, col);
                Sheet.AddCell(address, new Cell(address));
            }
        }
    }

    private async Task ExpandRight()
    {
        int newTotalCols = TotalCols + 10;

        var tasks = new List<Task>(); // Список задач для асинхронной обработки

        for (int row = 1; row <= TotalRows; row++)
        {
            for (int col = TotalCols + 1; col <= newTotalCols; col++)
            {
                var address = GetCellAddress(row, col);
                tasks.Add(Task.Run(() => Sheet.AddCell(address, new Cell(address))));
            }
        }

        await Task.WhenAll(tasks);

        TotalCols = newTotalCols;
    }

    private async Task ExpandDown()
    {
        int newTotalRows = TotalRows + 10;

        var tasks = new List<Task>();

        for (int row = TotalRows + 1; row <= newTotalRows; row++)
        {
            for (int col = 1; col <= TotalCols; col++)
            {
                var address = GetCellAddress(row, col);
                tasks.Add(Task.Run(() => Sheet.AddCell(address, new Cell(address))));
            }
        }

        await Task.WhenAll(tasks);

        TotalRows = newTotalRows;
        StateHasChanged();
    }

    private string GetCellAddress(int row, int col)
    {
        return $"{GetColumnLetter(col)}{row}";
    }

    private string GetColumnLetter(int col)
    {
        int dividend = col;
        string columnLetter = string.Empty;
        while (dividend > 0)
        {
            int modulo = (dividend - 1) % 26;
            columnLetter = Convert.ToChar(65 + modulo) + columnLetter;
            dividend = (dividend - modulo) / 26;
        }
        return columnLetter;
    }

    private async Task OnCellClick(Cell cell)
    {
        await JS.InvokeVoidAsync("window.cellHandler.setFormulaInputValue", cell.Value);
    }

   
}
